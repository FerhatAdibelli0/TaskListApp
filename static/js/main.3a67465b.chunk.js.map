{"version":3,"sources":["components/UI/Section.module.css","components/Tasks/TaskItem.module.css","components/Tasks/Tasks.module.css","components/NewTask/TaskForm.module.css","hooks/use-http.js","components/UI/Section.js","components/Tasks/TaskItem.js","components/Tasks/Tasks.js","components/NewTask/TaskForm.js","components/NewTask/NewTask.js","App.js","index.js"],"names":["module","exports","useHttp","useState","isLoading","setIsLoading","error","setError","sendRequest","useCallback","requestConfig","applyData","a","fetch","url","method","headers","body","JSON","stringify","response","ok","Error","json","data","message","Section","props","className","classes","section","children","TaskItem","task","Tasks","taskList","items","length","map","text","id","content","onClick","onFetch","loading","container","TaskForm","taskInputRef","useRef","form","onSubmit","event","preventDefault","enteredValue","current","value","trim","onEnterTask","type","ref","NewTask","sendRequestHandler","createTask","taskText","taskData","createdTask","name","onAddTask","enterTaskHandler","bind","App","tasks","setTasks","fetchTasks","useEffect","transformTask","taskKey","loadedTasks","push","Fragment","prevTasks","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a67465b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2hSai\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"TaskItem_task__3p-uC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Tasks_container__NYE4P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"TaskForm_form__hpLeE\"};","import { useState, useCallback } from \"react\";\r\n\r\nconst useHttp = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(requestConfig.url, {\r\n        method: requestConfig.method ? requestConfig.method : \"GET\",\r\n        headers: requestConfig.headers ? requestConfig.headers : {},\r\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      applyData(data);\r\n    } catch (err) {\r\n      setError(err.message || \"Something went wrong!\");\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  return {\r\n    isLoading,\r\n    error,\r\n    sendRequest,\r\n  };\r\n};\r\n\r\nexport default useHttp;\r\n","import classes from './Section.module.css';\n\nconst Section = (props) => {\n  return <section className={classes.section}>{props.children}</section>;\n};\n\nexport default Section;\n","import classes from './TaskItem.module.css';\n\nconst TaskItem = (props) => {\n  return <li className={classes.task}>{props.children}</li>\n};\n\nexport default TaskItem;","import Section from '../UI/Section';\nimport TaskItem from './TaskItem';\nimport classes from './Tasks.module.css';\n\nconst Tasks = (props) => {\n  let taskList = <h2>No tasks found. Start adding some!</h2>;\n\n  if (props.items.length > 0) {\n    taskList = (\n      <ul>\n        {props.items.map((task) => (\n          <TaskItem key={task.id}>{task.text}</TaskItem>\n        ))}\n      </ul>\n    );\n  }\n\n  let content = taskList;\n\n  if (props.error) {\n    content = <button onClick={props.onFetch}>Try again</button>;\n  }\n\n  if (props.loading) {\n    content = 'Loading tasks...';\n  }\n\n  return (\n    <Section>\n      <div className={classes.container}>{content}</div>\n    </Section>\n  );\n};\n\nexport default Tasks;\n","import { useRef } from 'react';\n\nimport classes from './TaskForm.module.css';\n\nconst TaskForm = (props) => {\n  const taskInputRef = useRef();\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const enteredValue = taskInputRef.current.value;\n\n    if (enteredValue.trim().length > 0) {\n      props.onEnterTask(enteredValue);\n    }\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitHandler}>\n      <input type='text' ref={taskInputRef} />\n      <button>{props.loading ? 'Sending...' : 'Add Task'}</button>\n    </form>\n  );\n};\n\nexport default TaskForm;\n","import useHttp from \"../../hooks/use-http\";\nimport Section from \"../UI/Section\";\nimport TaskForm from \"./TaskForm\";\n\nconst NewTask = (props) => {\n  const { error, isLoading, sendRequest: sendRequestHandler } = useHttp();\n\n  const createTask = (taskText, taskData) => {\n    const generatedId = taskData.name; // firebase-specific => \"name\" contains generated id\n    const createdTask = { id: generatedId, text: taskText };\n\n    props.onAddTask(createdTask);\n  };\n  const enterTaskHandler = async (taskText) => {\n    sendRequestHandler(\n      {\n        url: \"https://ferhat-s-first-default-rtdb.firebaseio.com/tasks.json\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: { text: taskText },\n        method: \"POST\",\n      },\n      createTask.bind(null, taskText)\n    );\n  };\n\n  return (\n    <Section>\n      <TaskForm onEnterTask={enterTaskHandler} loading={isLoading} />\n      {error && <p>{error}</p>}\n    </Section>\n  );\n};\n\nexport default NewTask;\n","import React, { useEffect, useState } from \"react\";\nimport useHttp from \"./hooks/use-http\";\nimport Tasks from \"./components/Tasks/Tasks\";\nimport NewTask from \"./components/NewTask/NewTask\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n\n  const { isLoading, error, sendRequest: fetchTasks } = useHttp();\n\n  useEffect(() => {\n    const transformTask = async (taskText) => {\n      const loadedTasks = [];\n\n      for (const taskKey in taskText) {\n        loadedTasks.push({ id: taskKey, text: taskText[taskKey].text });\n      }\n\n      setTasks(loadedTasks);\n    };\n\n    fetchTasks(\n      {\n        url: \"https://ferhat-s-first-default-rtdb.firebaseio.com/tasks.json\",\n      },\n      transformTask\n    );\n  }, [fetchTasks]);\n\n  const taskAddHandler = (task) => {\n    setTasks((prevTasks) => prevTasks.concat(task));\n  };\n\n  return (\n    <React.Fragment>\n      <NewTask onAddTask={taskAddHandler} />\n      <Tasks\n        items={tasks}\n        loading={isLoading}\n        error={error}\n        onFetch={fetchTasks}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}